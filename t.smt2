(set-logic QF_UF)
(declare-sort nat 0)
(declare-sort list 0)
(declare-sort tree 0)
(declare-fun succ (nat) nat)
(declare-fun is-succ (nat) Bool)
(declare-fun pred (nat) nat)
(declare-fun zero () nat)
(declare-fun is-zero (nat) Bool)
(declare-fun cons (tree list) list)
(declare-fun is-cons (list) Bool)
(declare-fun cdr (list) list)
(declare-fun car (list) tree)
(declare-fun null () list)
(declare-fun is-null (list) Bool)
(declare-fun node (list) tree)
(declare-fun is-node (tree) Bool)
(declare-fun children (tree) list)
(declare-fun leaf (nat) tree)
(declare-fun is-leaf (tree) Bool)
(declare-fun data (tree) nat)
(declare-fun x2 () nat)
(declare-fun x3 () nat)
(declare-fun x4 () list)
(declare-fun x5 () list)
(declare-fun x7 () tree)
(declare-fun contrived_variable6 () list)
(declare-fun contrived_variable1 () tree)
(declare-fun contrived_variable7 () list)
(declare-fun contrived_variable0 () list)
(declare-fun contrived_variable4 () list)
(declare-fun contrived_variable8 () tree)
(declare-fun contrived_variable3 () tree)
(declare-fun contrived_variable9 () tree)
(declare-fun contrived_variable5 () tree)
(declare-fun contrived_variable2 () list)
(declare-fun contrived_variable13 () tree)
(declare-fun contrived_variable11 () list)
(declare-fun contrived_variable10 () tree)
(declare-fun contrived_variable14 () list)
(declare-fun contrived_variable12 () list)

(assert (and (not (is-succ zero)) (is-zero zero)))
(assert (and (not (is-cons null)) (is-null null)))
(assert (and true
     (= contrived_variable7 contrived_variable0)
     (= contrived_variable9 contrived_variable8)))
(assert (and (= (cons x7 contrived_variable7) contrived_variable6)
     (is-cons contrived_variable6)
     (= (car contrived_variable6) x7)
     (= (cdr contrived_variable6) contrived_variable7)))
(assert (let ((a!1 (=> (is-cons x4)
               (and (= (car x4) contrived_variable10)
                    (= (cdr x4) contrived_variable11)))))
  (and (= (car x4) contrived_variable1)
       (= (cons contrived_variable10 contrived_variable11) x4)
       a!1)))
(assert (let ((a!1 (=> (is-node x7) (and (= (children x7) contrived_variable12)))))
  (and (= (children x7) contrived_variable7)
       (= (node contrived_variable12) x7)
       a!1)))
(assert (and (= (cons contrived_variable1 contrived_variable2) contrived_variable0)
     (is-cons contrived_variable0)
     (= (car contrived_variable0) contrived_variable1)
     (= (cdr contrived_variable0) contrived_variable2)))
(assert (and (= (cons contrived_variable5 contrived_variable6) contrived_variable4)
     (is-cons contrived_variable4)
     (= (car contrived_variable4) contrived_variable5)
     (= (cdr contrived_variable4) contrived_variable6)))
(assert (let ((a!1 (=> (is-cons x5)
               (and (= (car x5) contrived_variable13)
                    (= (cdr x5) contrived_variable14)))))
  (and (= (car x5) contrived_variable8)
       (= (cons contrived_variable13 contrived_variable14) x5)
       a!1)))
(assert (and (= (leaf x3) contrived_variable3)
     (is-leaf contrived_variable3)
     (= (data contrived_variable3) x3)))
(assert (and (= (leaf zero) contrived_variable9)
     (is-leaf contrived_variable9)
     (= (data contrived_variable9) zero)))
(assert (and (= (leaf x2) contrived_variable5)
     (is-leaf contrived_variable5)
     (= (data contrived_variable5) x2)))
(assert (and (= (cons contrived_variable3 contrived_variable4) contrived_variable2)
     (is-cons contrived_variable2)
     (= (car contrived_variable2) contrived_variable3)
     (= (cdr contrived_variable2) contrived_variable4)))
(assert (or (and (not (is-cons contrived_variable12)) (is-null contrived_variable12))
    (and (is-cons contrived_variable12) (not (is-null contrived_variable12)))))
(assert (=> (is-null contrived_variable12) (= contrived_variable12 null)))
(assert (or (and (not (is-cons contrived_variable14)) (is-null contrived_variable14))
    (and (is-cons contrived_variable14) (not (is-null contrived_variable14)))))
(assert (=> (is-null contrived_variable14) (= contrived_variable14 null)))
(assert (or (and (not (is-cons contrived_variable11)) (is-null contrived_variable11))
    (and (is-cons contrived_variable11) (not (is-null contrived_variable11)))))
(assert (=> (is-null contrived_variable11) (= contrived_variable11 null)))
(assert (or (and (not (is-cons contrived_variable2)) (is-null contrived_variable2))
    (and (is-cons contrived_variable2) (not (is-null contrived_variable2)))))
(assert (=> (is-null contrived_variable2) (= contrived_variable2 null)))
(assert (or (and (not (is-cons contrived_variable4)) (is-null contrived_variable4))
    (and (is-cons contrived_variable4) (not (is-null contrived_variable4)))))
(assert (=> (is-null contrived_variable4) (= contrived_variable4 null)))
(assert (or (and (not (is-cons contrived_variable0)) (is-null contrived_variable0))
    (and (is-cons contrived_variable0) (not (is-null contrived_variable0)))))
(assert (=> (is-null contrived_variable0) (= contrived_variable0 null)))
(assert (or (and (not (is-cons contrived_variable7)) (is-null contrived_variable7))
    (and (is-cons contrived_variable7) (not (is-null contrived_variable7)))))
(assert (=> (is-null contrived_variable7) (= contrived_variable7 null)))
(assert (or (and (not (is-cons contrived_variable6)) (is-null contrived_variable6))
    (and (is-cons contrived_variable6) (not (is-null contrived_variable6)))))
(assert (=> (is-null contrived_variable6) (= contrived_variable6 null)))
(assert (or (and (not (is-cons x5)) (is-null x5)) (and (is-cons x5) (not (is-null x5)))))
(assert (=> (is-null x5) (= x5 null)))
(assert (or (and (not (is-cons x4)) (is-null x4)) (and (is-cons x4) (not (is-null x4)))))
(assert (=> (is-null x4) (= x4 null)))
(assert (or (and (not (is-node contrived_variable10)) (is-leaf contrived_variable10))
    (and (is-node contrived_variable10) (not (is-leaf contrived_variable10)))))
(assert (or (and (not (is-node contrived_variable13)) (is-leaf contrived_variable13))
    (and (is-node contrived_variable13) (not (is-leaf contrived_variable13)))))
(assert (or (and (not (is-node contrived_variable5)) (is-leaf contrived_variable5))
    (and (is-node contrived_variable5) (not (is-leaf contrived_variable5)))))
(assert (or (and (not (is-node contrived_variable9)) (is-leaf contrived_variable9))
    (and (is-node contrived_variable9) (not (is-leaf contrived_variable9)))))
(assert (or (and (not (is-node contrived_variable3)) (is-leaf contrived_variable3))
    (and (is-node contrived_variable3) (not (is-leaf contrived_variable3)))))
(assert (or (and (not (is-node contrived_variable8)) (is-leaf contrived_variable8))
    (and (is-node contrived_variable8) (not (is-leaf contrived_variable8)))))
(assert (or (and (not (is-node contrived_variable1)) (is-leaf contrived_variable1))
    (and (is-node contrived_variable1) (not (is-leaf contrived_variable1)))))
(assert (or (and (not (is-node x7)) (is-leaf x7)) (and (is-node x7) (not (is-leaf x7)))))
(assert (or (and (not (is-succ x3)) (is-zero x3)) (and (is-succ x3) (not (is-zero x3)))))
(assert (=> (is-zero x3) (= x3 zero)))
(assert (or (and (not (is-succ x2)) (is-zero x2)) (and (is-succ x2) (not (is-zero x2)))))
(assert (=> (is-zero x2) (= x2 zero)))
(assert (=> (and (is-cons x4)) (not (= (cdr x4) x4))))
(assert (=> (and (is-cons x5)) (not (= (cdr x5) x5))))
(assert (=> (and (is-cons contrived_variable7))
    (not (= (cdr contrived_variable7) contrived_variable7))))
(assert (=> (and (is-cons contrived_variable6))
    (not (= (cdr contrived_variable6) contrived_variable6))))
(assert (=> (and (is-cons contrived_variable0))
    (not (= (cdr contrived_variable0) contrived_variable0))))
(assert (=> (and (is-cons contrived_variable4))
    (not (= (cdr contrived_variable4) contrived_variable4))))
(assert (=> (and (is-cons contrived_variable2))
    (not (= (cdr contrived_variable2) contrived_variable2))))
(assert (let ((a!1 (and (not (is-node (car x5)))
                (not (is-leaf (car x5)))
                (not (is-cons (cdr x5)))))
      (a!2 (and (not (is-node (car x4)))
                (not (is-leaf (car x4)))
                (not (is-cons (cdr x4)))))
      (a!3 (and (not (is-node (car null)))
                (not (is-leaf (car null)))
                (not (is-cons (cdr null)))))
      (a!4 (=> (is-node x7) (not (is-cons (children x7)))))
      (a!5 (=> (is-leaf x7) (not (is-succ (data x7)))))
      (a!6 (=> (is-succ x3) (not (is-succ (pred x3)))))
      (a!7 (=> (is-succ x2) (not (is-succ (pred x2)))))
      (a!8 (=> (is-succ zero) (not (is-succ (pred zero))))))
  (and (=> (is-cons x5) a!1)
       (=> (is-cons x4) a!2)
       (=> (is-cons null) a!3)
       a!4
       a!5
       a!6
       a!7
       a!8)))

(check-sat)