(set-logic QF_UF)
(declare-sort nat 0)
(declare-sort list 0)
(declare-fun succ (nat) nat)
(declare-fun is-succ (nat) Bool)
(declare-fun pred (nat) nat)
(declare-fun zero () nat)
(declare-fun is-zero (nat) Bool)
(declare-fun cons (nat list) list)
(declare-fun is-cons (list) Bool)
(declare-fun cdr (list) list)
(declare-fun car (list) nat)
(declare-fun null () list)
(declare-fun is-null (list) Bool)
(declare-fun x () list)
(declare-fun y () list)
(declare-fun size (list) nat)
(declare-fun contrived_variable1 () nat)
(declare-fun contrived_variable0 () list)
(declare-fun contrived_variable2 () nat)
(assert (and (not (is-succ zero)) (is-zero zero)))
(assert (and (not (is-cons null)) (is-null null)))
(assert (= x contrived_variable0))
(assert (= y null))
(assert (= contrived_variable2 contrived_variable1))
(assert (= (size y) contrived_variable1))
(assert
 (and (= (cons zero null) contrived_variable0) (is-cons contrived_variable0)
  (= (car contrived_variable0) zero) (= (cdr contrived_variable0) null)))
(assert (= (size x) contrived_variable2))
(assert
 (or (and (not (is-cons contrived_variable0)) (is-null contrived_variable0))
  (and (is-cons contrived_variable0) (not (is-null contrived_variable0)))))
(assert (=> (is-null contrived_variable0) (= contrived_variable0 null)))
(assert
 (or (and (not (is-cons y)) (is-null y)) (and (is-cons y) (not (is-null y)))))
(assert (=> (is-null y) (= y null)))
(assert
 (or (and (not (is-cons x)) (is-null x)) (and (is-cons x) (not (is-null x)))))
(assert (=> (is-null x) (= x null)))
(assert
 (or (and (not (is-succ contrived_variable2)) (is-zero contrived_variable2))
  (and (is-succ contrived_variable2) (not (is-zero contrived_variable2)))))
(assert (=> (is-zero contrived_variable2) (= contrived_variable2 zero)))
(assert
 (or (and (not (is-succ contrived_variable1)) (is-zero contrived_variable1))
  (and (is-succ contrived_variable1) (not (is-zero contrived_variable1)))))
(assert (=> (is-zero contrived_variable1) (= contrived_variable1 zero)))
(assert
 (=> (and (is-cons contrived_variable0))
  (not (= (cdr contrived_variable0) contrived_variable0))))
(check-sat)
(assert
 (=> (and (is-cons contrived_variable0))
  (not (= (cdr contrived_variable0) contrived_variable0))))
(check-sat)
(declare-fun contrived_variable3 () Bool)
(declare-fun contrived_variable4 () nat)
(declare-fun contrived_variable6 () list)
(assert (=> (is-cons y) (= (cons contrived_variable4 contrived_variable6) y)))
(assert
 (or (and (not (is-cons y)) (is-null y)) (and (is-cons y) (not (is-null y)))))
(declare-fun contrived_variable5 () nat)
(assert (= contrived_variable4 (car y)))
(declare-fun contrived_variable7 () nat)
(assert (= contrived_variable6 (cdr y)))
(assert (= (size y) contrived_variable1))
(assert (= contrived_variable3 (= y null)))
(assert (=> contrived_variable3 (= contrived_variable1 zero)))
(assert
 (=> (not contrived_variable3)
  (= contrived_variable1 (succ (size contrived_variable6)))))
(declare-fun contrived_variable8 () Bool)
(declare-fun contrived_variable9 () nat)
(declare-fun contrived_variable11 () list)
(assert
 (=> (is-cons x) (= (cons contrived_variable9 contrived_variable11) x)))
(assert
 (or (and (not (is-cons x)) (is-null x)) (and (is-cons x) (not (is-null x)))))
(declare-fun contrived_variable10 () nat)
(assert (= contrived_variable9 (car x)))
(declare-fun contrived_variable12 () nat)
(assert (= contrived_variable11 (cdr x)))
(assert (= (size x) contrived_variable2))
(assert (= contrived_variable8 (= x null)))
(assert (=> contrived_variable8 (= contrived_variable2 zero)))
(assert
 (=> (not contrived_variable8)
  (= contrived_variable2 (succ (size contrived_variable11)))))
(declare-fun contrived_variable13 () Bool)
(declare-fun contrived_variable14 () nat)
(declare-fun contrived_variable16 () list)
(assert
 (=> (is-cons contrived_variable6)
  (= (cons contrived_variable14 contrived_variable16) contrived_variable6)))
(assert
 (or (and (not (is-cons contrived_variable6)) (is-null contrived_variable6))
  (and (is-cons contrived_variable6) (not (is-null contrived_variable6)))))
(declare-fun contrived_variable15 () nat)
(assert (= contrived_variable14 (car contrived_variable6)))
(declare-fun contrived_variable17 () nat)
(assert (= contrived_variable16 (cdr contrived_variable6)))
(assert (= (size contrived_variable6) contrived_variable7))
(assert (= contrived_variable13 (= contrived_variable6 null)))
(assert (=> contrived_variable13 (= contrived_variable7 zero)))
(assert
 (=> (not contrived_variable13)
  (= contrived_variable7 (succ (size contrived_variable16)))))
(declare-fun contrived_variable18 () Bool)
(declare-fun contrived_variable19 () nat)
(declare-fun contrived_variable21 () list)
(assert
 (=> (is-cons contrived_variable11)
  (= (cons contrived_variable19 contrived_variable21) contrived_variable11)))
(assert
 (or
  (and (not (is-cons contrived_variable11)) (is-null contrived_variable11))
  (and (is-cons contrived_variable11) (not (is-null contrived_variable11)))))
(declare-fun contrived_variable20 () nat)
(assert (= contrived_variable19 (car contrived_variable11)))
(declare-fun contrived_variable22 () nat)
(assert (= contrived_variable21 (cdr contrived_variable11)))
(assert (= (size contrived_variable11) contrived_variable12))
(assert (= contrived_variable18 (= contrived_variable11 null)))
(assert (=> contrived_variable18 (= contrived_variable12 zero)))
(assert
 (=> (not contrived_variable18)
  (= contrived_variable12 (succ (size contrived_variable21)))))
(assert contrived_variable13)

; cv2 is not 0 since it is equal to a successor
(assert (not (is-zero contrived_variable2)))

; should be unsat since we know that this is zero
(assert (is-zero contrived_variable1))

(check-sat)
