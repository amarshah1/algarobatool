(set-logic QF_UF)
(declare-sort nat 0)
(declare-sort enum 0)
(declare-sort list 0)
(declare-fun succ (nat) nat)
(declare-fun is-succ (nat) Bool)
(declare-fun pred (nat) nat)
(declare-fun zero () nat)
(declare-fun is-zero (nat) Bool)
(declare-fun A () enum)
(declare-fun is-A (enum) Bool)
(declare-fun B () enum)
(declare-fun is-B (enum) Bool)
(declare-fun cons (enum list) list)
(declare-fun is-cons (list) Bool)
(declare-fun cdr (list) list)
(declare-fun car (list) enum)
(declare-fun null () list)
(declare-fun is-null (list) Bool)
(declare-fun x () list)
(declare-fun y () list)
(declare-fun size (list) nat)
(declare-fun size_x () nat)
(declare-fun contrived_variable1 () nat)
(declare-fun contrived_variable0 () nat)
(declare-fun contrived_variable3 () nat)
(declare-fun contrived_variable2 () nat)
(declare-const contrived_variable4 Bool)
(declare-fun contrived_variable5 () enum)
(declare-fun contrived_variable7 () list)
(declare-fun contrived_variable9 () Bool)
(declare-fun contrived_variable10 () enum)
(declare-fun contrived_variable12 () list)
(assert (and (not (is-succ zero)) (is-zero zero)))
(assert (and (is-A A) (not (is-B A))))
(assert (and (not (is-A B)) (is-B B)))
(assert (and (not (is-cons null)) (is-null null)))
(assert (= size_x contrived_variable0))
(assert (= contrived_variable3 contrived_variable1))
(assert (and (= (succ contrived_variable2) contrived_variable1)
     (is-succ contrived_variable1)
     (= (pred contrived_variable1) contrived_variable2)))
(assert (and (= (succ size_x) contrived_variable0)
     (is-succ contrived_variable0)
     (= (pred contrived_variable0) size_x)))
(assert (= (size y) contrived_variable3))
(assert (= (size x) contrived_variable2))
(assert (or (and (not (is-cons y)) (is-null y)) (and (is-cons y) (not (is-null y)))))
(assert (=> (is-null y) (= y null)))
(assert (or (and (not (is-cons x)) (is-null x)) (and (is-cons x) (not (is-null x)))))
(assert (=> (is-null x) (= x null)))
(assert (or (and (not (is-succ contrived_variable2)) (is-zero contrived_variable2))
    (and (is-succ contrived_variable2) (not (is-zero contrived_variable2)))))
(assert (=> (is-zero contrived_variable2) (= contrived_variable2 zero)))
(assert (or (and (not (is-succ contrived_variable3)) (is-zero contrived_variable3))
    (and (is-succ contrived_variable3) (not (is-zero contrived_variable3)))))
(assert (=> (is-zero contrived_variable3) (= contrived_variable3 zero)))
(assert (or (and (not (is-succ contrived_variable0)) (is-zero contrived_variable0))
    (and (is-succ contrived_variable0) (not (is-zero contrived_variable0)))))
(assert (=> (is-zero contrived_variable0) (= contrived_variable0 zero)))
(assert (or (and (not (is-succ contrived_variable1)) (is-zero contrived_variable1))
    (and (is-succ contrived_variable1) (not (is-zero contrived_variable1)))))
(assert (=> (is-zero contrived_variable1) (= contrived_variable1 zero)))
(assert (or (and (not (is-succ size_x)) (is-zero size_x))
    (and (is-succ size_x) (not (is-zero size_x)))))
(assert (=> (is-zero size_x) (= size_x zero)))
(assert (= (is-cons y) (= (cons contrived_variable5 contrived_variable7) y)))
(assert (or (and (not (is-cons y)) (is-null y)) (and (is-cons y) (not (is-null y)))))
(assert (= contrived_variable5 (car y)))
(assert (= contrived_variable7 (cdr y)))
(assert (= (size y) contrived_variable3))
(assert (= contrived_variable4 (= y null)))
(assert (=> contrived_variable4
    (and (= contrived_variable3 zero) (is-zero contrived_variable3))))
(assert (let ((a!1 (and (= contrived_variable3 (succ (size contrived_variable7)))
                (is-succ contrived_variable3))))
  (=> (not contrived_variable4) a!1)))
(assert (= (is-cons x) (= (cons contrived_variable10 contrived_variable12) x)))
(assert (or (and (not (is-cons x)) (is-null x)) (and (is-cons x) (not (is-null x)))))
(assert (= contrived_variable10 (car x)))
(assert (= contrived_variable12 (cdr x)))
(assert (= (size x) contrived_variable2))
(assert (= contrived_variable9 (= x null)))
(assert (=> contrived_variable9
    (and (= contrived_variable2 zero) (is-zero contrived_variable2))))
(assert (let ((a!1 (and (= contrived_variable2 (succ (size contrived_variable12)))
                (is-succ contrived_variable2))))
  (=> (not contrived_variable9) a!1)))
(check-sat)