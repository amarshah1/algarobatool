(declare-datatypes ((nat 0)(list 0)(tree 0)) (((succ (pred nat)) (zero))
((cons (car tree) (cdr list)) (null))
((node (children list)) (leaf (data nat)))
))

(declare-datatypes ((a 0) (b 0) (c 0) (d 0) (e 0) (f 0) (g 0))
    (((aconst (asel b) (asel d)))
    ((bconst (bsel c)))
    ((cconst (csel a) (csel e)))
    ((dconst (dsel c)))
    ((econst))
    ((fconst (fsel g)))
    ((gconst (gsel e))))
)
(declare-fun x1 () nat)
(declare-fun x2 () nat)
(declare-fun x10 () nat)
(declare-fun x11 () list)
(declare-fun x12 () list)
(declare-fun x13 () tree)
(declare-fun x14 () tree)
(declare-fun x15 () tree)


(declare-fun x3 () a)
(declare-fun x4 () b)
(declare-fun x5 () b)
(declare-fun x6 () b)
(declare-fun x7 () d)
(declare-fun x8 () e)
(declare-fun x9 () e)
(declare-fun x16 () f)
(declare-fun x17 () f)
(declare-fun x18 () g)

(declare-fun x21 () g)
(declare-fun x22 () g)
(declare-fun x23 () g)

(assert (and x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x21 x22 x23))

;(assert (and (= (econst x16) x9) (= (fsel x18) x17)))

;(assert (and (= x11 x14) ((_ is null) x17)))
(check-sat)
(exit)