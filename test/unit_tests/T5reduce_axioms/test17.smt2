(set-info :smt-lib-version 2.6)
(set-logic QF_UFDT)
(set-info :source |
Generated by: Pierre Bouvier
Generated on: 2021-03-12
Application: Automatic decomposition of Petri Nets into Automata Networks
Target solver: CVC4, Z3
Publications:

[1] Pierre Bouvier, Hubert Garavel, and Hernan Ponce de Leon.
    "Automatic Decomposition of Petri Nets into Automata Networks -
    A Synthetic Account". Proceedings PETRI NETS 2020, LNCS 12152,
    Springer. https://doi.org/10.1007/978-3-030-51831-8_1

[2] Hubert Garavel. "Nested-Unit Petri Nets". Journal of Logical
    and Algebraic Methods in Programming, vol. 104, Elsevier, 2019. 
    https://doi.org/10.1016/j.jlamp.2018.11.005

In [1], several methods for decomposing an ordinary, safe Petri net
into a flat, unit-safe NUPN [2], have been proposed. These methods
are implemented in a complete tool chain involving SAT solvers, SMT
solvers, and tools for graph coloring and finding maximal cliques.
From a data set of 12,000+ NUPN models, 51,000+ SMT formulas have
been generated, out of which a subset of 1200 interesting formulas
to be used as SMT-LIB 2.6 benchmarks was carefully selected.

Original filename: vlsat3_e01.smt2

Specific parameters for the present benchmark:
- number of places: 80
- number of units: 15
- number of edges in the concurrency graph: 2970
- number of variables: 0
- number of uninterpreted functions: 1
- number of asserts: 2984
- total number of operators in asserts: 15205
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)

(declare-datatypes ((Place 0)) (((p1) (p2) (p3) (p4) (p5) (p6) (p7) )))
(declare-datatypes ((Unit 0)) (((u0) (u1) (u2) (u3) (u4) (u5) (u6) (u7) (u8) (u9) (u10) (u11) (u12) (u13) (u14))))
(declare-fun u (Place) Unit)
(assert (= (u p1) u0))
(assert (or (= (u p2) u0) (= (u p2) u1)))
(assert (or (= (u p3) u0) (= (u p3) u1) (= (u p3) u2)))
(assert (or (= (u p4) u0) (= (u p4) u1) (= (u p4) u2) (= (u p4) u3)))
(assert (or (= (u p5) u0) (= (u p5) u1) (= (u p5) u2) (= (u p5) u3) (= (u p5) u4)))
(assert (or (= (u p6) u0) (= (u p6) u1) (= (u p6) u2) (= (u p6) u3) (= (u p6) u4) (= (u p6) u5)))
(assert (distinct (u p3) (u p7)))
(assert (distinct (u p3) (u p2)))
(assert (distinct (u p3) (u p6)))
(check-sat)