/*
 * This file is part of the RADA prototype.
 * 
 * Copyright (C) 2013 University of Minnesota 
 * See file COPYING in the top-level source directory for licensing information 
 */

package rada;

import java.util.ArrayList;
import java.util.List;

public class rada {
  
  /*
   * Is "--showtempfiles" provided?
   */
  private static boolean hasShowTempFiles(String[] args) {
    for (String arg : args) {
      if (arg.equals("--showtempfiles")) {
        return true;
      }      
    }
    return false;
  }

  /*
   * Is "--verbose" provided?
   */
  private static boolean hasVerbose(String[] args) {
    for (String arg : args) {
      if (arg.equals("--verbose")) {
        return true;
      }      
    }
    return false;
  }
  
  /*
   * Prints a separator if there are multiple obligations.
   */  
  private static void printSeparator(int numObligations) {
    if (numObligations > 1) {
      System.out.println("======================");
    }
  }

  /*
   * Prints the number of obligations if there are multiple obligations.
   */
  private static void printNumObligations(int numObligations) {
    if (numObligations > 1) {
      System.out.println("Number of obligations: " + numObligations);
    }    
  }
  
  /*
   * Prints the index of obligation if there are multiple obligations.
   */
  private static void printObligationIndex(int numObligations, int index) {
    if (numObligations > 1) {
      System.out.println("Obligation #" + index + ":");
    }
  }
  
 /*
  * Prints the total running time if there are multiple obligations.
  */
  private static void printTotalRunningTime(int numObligations, long startTimeAll) {    
    if (numObligations > 1) {
      long endTimeAll   = System.currentTimeMillis();
      long totalTimeAll = endTimeAll - startTimeAll;
      System.out.println("Total time (s) = " + (float)totalTimeAll / 1000);
    }    
  }
  
  /*
   * Prints the running time given the start time. 
   */
  private static void printRunningTime(long startTimeI) {
    long endTimeI   = System.currentTimeMillis();
    long totalTimeI = endTimeI - startTimeI;
    System.out.println("Time (s) = " + (float)totalTimeI / 1000);
  }
  
//  /*
//   * Prints the result from RADA.
//   */
//  private static void printResult(RadaResult result, long startTimeI) {
//    System.out.println(result.getResultType());
//    if (result.getResultType() == ResultType.ERROR && result.getMessage() != null) {
//      System.out.println(result.getMessage());          
//    }
//    if (Config.VERBOSE) {
//      // If in verbose mode, print some extra information.
//      if (result.getResultType() != ResultType.ERROR) {
//        System.out.println("Number of unrollings: " + result.getNumUnrollings());
//      }
//      printRunningTime(startTimeI);
//    }
//  }
//  
//  /*
//   * Runs RADA.
//   */
//  private static void runRada(String filePath, String solverName) {        
//    try {
//      // Generate files corresponding to each check-sat
//      List<String> obligationContents = 
//          ObligationPreprocessor.processObligations(filePath);
//      printNumObligations(obligationContents.size());
//      long startTimeAll = System.currentTimeMillis();
//      for (int i = 0; i < obligationContents.size(); i++) {
//        printObligationIndex(obligationContents.size(), i + 1);
//        long startTimeI = System.currentTimeMillis();
//        UnrollingProcedure procedure = new UnrollingProcedure();;
//        RadaResult result = procedure.checkSat(obligationContents.get(i),
//            solverName, -1);
//        printResult(result, startTimeI);
//        printSeparator(obligationContents.size());
//      }
//      printTotalRunningTime(obligationContents.size(), startTimeAll);
//    } catch (Exception e) {
//      System.out.println("Error when preprocessing the input file.");
//    }
//  }
  
  /*
   * Prints the result from RADA.
   */
  private static void printResult(RadaResult result, long startTimeI) {
   System.out.println(result.getResultType());
   if (result.getResultType() == ResultType.ERROR && result.getMessage() != null) {
     System.out.println(result.getMessage());          
   }
   if (Config.VERBOSE) {
     // If in verbose mode, print some extra information.
     if (result.getResultType() != ResultType.ERROR) {       
       System.out.println("Number of unrollings: " + result.getNumUnrollings());
       System.out.println("Number of generated temporary .smt2 files: " + result.getSolverResults().size());
     }
     printRunningTime(startTimeI);
   }
  }
  
  /*
   * Returns a list of results such that (1) the list contains only 1 result,
   * and (2) the result is an error message.
   */
  private static List<RadaResult> getErrorResults(String errorMessage) {
    List<RadaResult> radaResults = new ArrayList<RadaResult>();
    RadaResult errorResult = new RadaResult();
    errorResult.setResultTypeAndMessage(ResultType.ERROR, errorMessage);
    radaResults.add(errorResult);
    System.out.println("ERROR: " + errorMessage);
    return radaResults;
  }
  
  /*
   * Runs RADA.
   */
  public static List<RadaResult> run(String filePath, String solverName) {
    return run(filePath, solverName, -1);
  }
    
  public static List<RadaResult> run(String filePath, String solverName, int maxUnrolls) {
    if (!Util.programExists(solverName)) {
      // Check whether the solver is in the system path or not
      return getErrorResults("Solver " + solverName + " is not in system path.");
    } else if (!Util.fileExists(filePath)) {
      // Check if the input file exists or not
      return getErrorResults("File " + filePath + " does not exist.");
    }

    // Parameters seemed valid. Start the unrolling decision procedure.    
    List<RadaResult> radaResults = new ArrayList<RadaResult>();
    List<String> obligationContents = new ArrayList<String>();
    try {
      // Generate files corresponding to each check-sat
      obligationContents = ObligationPreprocessor.processObligations(filePath);
    } catch (Exception e) {
      return getErrorResults(e.getMessage());
    }
    printNumObligations(obligationContents.size());
    long startTimeAll = System.currentTimeMillis();
    for (int i = 0; i < obligationContents.size(); i++) {
      printObligationIndex(obligationContents.size(), i + 1);
      long startTimeI = System.currentTimeMillis();
      UnrollingProcedure procedure = new UnrollingProcedure();;
      RadaResult result = procedure.checkSat(obligationContents.get(i),
          solverName, maxUnrolls);
      radaResults.add(result);
      if (result.getResultType() == ResultType.ERROR) {
        // If we find an error during running time, we stop immediately.
        // Also, we only store the error result.
        radaResults = getErrorResults(result.getMessage());
        System.out.println("Found an error. RADA is stopped!");
        break;
      } else {
        printResult(result, startTimeI);
        printSeparator(obligationContents.size());
      }
    }
    printTotalRunningTime(obligationContents.size(), startTimeAll);
    return radaResults;
  }
    
  public static void main(String[] args) throws Exception {
    if (args.length < 3 || !args[0].equals("--solver")) {
      System.out.println("Error: Command invalid.");
    } else {
      String solverName = args[1];
      String filePath = args[2];      
      Config.SHOW_TEMP_FILES = hasShowTempFiles(args);
      Config.VERBOSE = hasVerbose(args);
      run(filePath, solverName);
    }
  }
}