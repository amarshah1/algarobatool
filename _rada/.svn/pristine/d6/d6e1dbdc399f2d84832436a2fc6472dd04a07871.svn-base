/*
 * This file is part of the RADA prototype.
 * 
 * Copyright (C) 2013 University of Minnesota 
 * See file COPYING in the top-level source directory for licensing information 
 */

package rada;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;

import org.apache.commons.lang3.StringUtils;
import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTree;
import org.antlr.v4.runtime.tree.ParseTreeWalker;


public class Util { 
  public static String joinStringsWithSpaceSeparator(List<String> l) {
    return StringUtils.join(l, Constant.SPACE);
  }
  
  public static String joinStringsWithNewLineSeparator(List<String> l) {
    return StringUtils.join(l, Constant.NEWLINE);
  }
  
  public static String makeAnd(String expr1, String expr2) {
    assert(expr1 != null || expr2 != null);
    if (expr1 == null) {
      return expr2;
    }
    if (expr2 == null) {
      return expr1;
    }   
    return Util.joinStringsWithSpaceSeparator(Arrays.asList(
        Constant.LPAREN,
        Constant.AND,
        expr1,
        expr2,
        Constant.RPAREN));
  }
  
  public static String makeOr(String expr1, String expr2) {
    assert(expr1 != null || expr2 != null);
    if (expr1 == null) {
      return expr2;
    }
    if (expr2 == null) {
      return expr1;
    }
    return Util.joinStringsWithSpaceSeparator(Arrays.asList(
        Constant.LPAREN,
        Constant.OR,
        expr1,
        expr2,
        Constant.RPAREN));    
  }
    
  public static String makeOr(Set<String> exprs) {
    assert(exprs.size() > 0);
    String res = null;
    for (String expr : exprs) {
      res = makeOr(expr, res);
    }
    return res;
  }
  
  public static String makeNot(String expr) {
    assert(expr != null);
    return Util.joinStringsWithSpaceSeparator(Arrays.asList(
        Constant.LPAREN,
        Constant.NOT,
        expr,
        Constant.RPAREN));    
  }
  
  public static String makeAssert(String expr) {
    assert(expr != null);
    return Util.joinStringsWithSpaceSeparator(Arrays.asList(
        Constant.LPAREN,
        Constant.ASSERT,
        expr,
        Constant.RPAREN));
  }
  
  public static String makeEqual(String expr1, String expr2) {
    assert(expr1 != null && expr2 != null);
    return Util.joinStringsWithSpaceSeparator(Arrays.asList(
        Constant.LPAREN,
        Constant.EQUAL,
        expr1,
        expr2,
        Constant.RPAREN));
  }
  
  public static String makeCatApp(String catName, List<String> actualTerms) {
    return Util.joinStringsWithSpaceSeparator(Arrays.asList(
        Constant.LPAREN,
        catName,
        Util.joinStringsWithSpaceSeparator(actualTerms),
        Constant.RPAREN));    
  }
  
  public static String makeDeclareFunCat(String catName, List<Argument> formalArgs,
                                                         String outputSort) {
    // extract the input sorts from the list of arguments
    List<String> inputSorts = new ArrayList<String>();
    for (Argument argument : formalArgs) {
      inputSorts.add(argument.getSort());
    }
    
    return Util.joinStringsWithSpaceSeparator(Arrays.asList(
        Constant.LPAREN,
        Constant.DECLAREFUN,
        catName,
        Constant.LPAREN,
        Util.joinStringsWithSpaceSeparator(inputSorts), //TODO(hungpt): Test
        Constant.RPAREN,
        outputSort,
        Constant.RPAREN));
  }
  
  /**
   * Given a list of arguments, returns a string showing the list as (sym1 sort1) (sym2 sort2)...
   */
  public static String makeListOfArguments(List<Argument> formalArgs) {
    List<String> symbolsAndSorts = new ArrayList<String>();
    symbolsAndSorts.add(Constant.LPAREN);
    for (Argument argument : formalArgs) {
      symbolsAndSorts.add(Constant.LPAREN);
      symbolsAndSorts.add(argument.getSymbol());
      symbolsAndSorts.add(argument.getSort());
      symbolsAndSorts.add(Constant.RPAREN);
    }
    symbolsAndSorts.add(Constant.RPAREN);
    return Util.joinStringsWithSpaceSeparator(symbolsAndSorts);
  }
  
  /**
   * Makes a define-fun.
   *
   * Example: (define-fun SumTree_GeneratedCatDefineFun ((foo RealTree)) Real ...)
   */
  public static String makeDefineFun(String funName,
      List<Argument> formalArgs, String outputSort, String body) {    
    return Util.joinStringsWithSpaceSeparator(Arrays.asList(
        Constant.LPAREN,
        Constant.DEFINEFUN,
        funName,
        makeListOfArguments(formalArgs),
        outputSort,
        body,
        Constant.RPAREN));
  }
  
  /**
   * Returns a check-sat statement.
   */
  public static String makeCheckSat() {
    return Util.joinStringsWithSpaceSeparator(Arrays.asList(
        Constant.LPAREN,
        Constant.CHECKSAT,
        Constant.RPAREN));    
  }
  
  /**
   * Substitutes formal arguments by corresponding actual terms in an expression, which is also a term 
   */
  public static String substitute(List<Argument> formalArgs,
                                  List<String> actualTerms, String exprTerm) {
    CharStream charStream = new ANTLRInputStream(exprTerm);
    RadaGrammarLexer lexer = new RadaGrammarLexer(charStream);
    CommonTokenStream tokens = new CommonTokenStream(lexer);
    RadaGrammarParser parser = new RadaGrammarParser(tokens);
    ParseTree tree = parser.term();
    ParseTreeWalker walker = new ParseTreeWalker();
    SubstitutionListener listener = new SubstitutionListener(
        tokens, formalArgs, actualTerms);
    walker.walk(listener, tree);
    return listener.getRewriter().getText();
  }
  
  /*
   * Checks if an external program exists or not.
   */
  public static boolean programExists(String program) {    
    try {
      Runtime rt = Runtime.getRuntime();
      rt.exec(program);
    } catch (Exception e) {
      return false;
    }
    return true;
  }
  
  /*
   * Checks if a file exists or not.
   */
  public static boolean fileExists(String filePath) {   
    File file = new File(filePath);
    if (file.exists()) {
      return true;
    }
    return false;
  }
  
  /*
   * Detects whether a solver is CVC4 or not.
   */
  public static boolean isCVC4(String solver) {
    return solver.toLowerCase().contains(Constant.CVC4);
  }
}