/*
 * This file is part of the RADA prototype.
 * 
 * Copyright (C) 2013 University of Minnesota 
 * See file COPYING in the top-level source directory for licensing information 
 */

package rada;

import static org.junit.Assert.*;

import java.util.List;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;


public class radaTest {
  private String solver;
  private String testDir;
  final String Z3 = "z3";
  final String CVC4 = "cvc4";
  
  @Before
  public void setUp() throws Exception {
    solver = Z3;            // NOTE: Change it to the solver in your system
    Config.SHOW_TEMP_FILES = false;
    Config.VERBOSE = false;
    testDir = "test/";    
  }

  @After
  public void tearDown() throws Exception {
  }
  
  /*
   * Test all benchmark examples mentioned in the Rada paper
   */
  @Test
  public void testRunSumtree01() {
    List<RadaResult> results = rada.run(testDir + "sumtree01.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.SAT);
    assertEquals(results.get(0).getSolverResults().size(), 4);
    assertEquals(results.get(0).getNumUnrollings(), 2);
  }
  
  @Test
  public void testRunSumtree02() {
    List<RadaResult> results = rada.run(testDir + "sumtree02.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.SAT);
    assertEquals(results.get(0).getSolverResults().size(), 4);
    assertEquals(results.get(0).getNumUnrollings(), 2);
  }
 
  @Test
  public void testRunSumtree03() {
    List<RadaResult> results = rada.run(testDir + "sumtree03.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.SAT);
    assertEquals(results.get(0).getSolverResults().size(), 8);
    assertEquals(results.get(0).getNumUnrollings(), 4);
  }
  
  @Test
  public void testRunSumtree04() {
    List<RadaResult> results = rada.run(testDir + "sumtree04.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);
    assertEquals(results.get(0).getSolverResults().size(), 1);
    assertEquals(results.get(0).getNumUnrollings(), 0);
  }
  
  @Test
  public void testRunSumtree05() {
    List<RadaResult> results = rada.run(testDir + "sumtree05.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.SAT);
    assertEquals(results.get(0).getSolverResults().size(), 4);
    assertEquals(results.get(0).getNumUnrollings(), 2);
  }
  
  @Test
  public void testRunSumtree06() {
    List<RadaResult> results = rada.run(testDir + "sumtree06.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.SAT);
    assertEquals(results.get(0).getSolverResults().size(), 4);
    assertEquals(results.get(0).getNumUnrollings(), 2);
  }
  
  @Test
  public void testRunSumtree07() {
    List<RadaResult> results = rada.run(testDir + "sumtree07.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.SAT);
    assertEquals(results.get(0).getSolverResults().size(), 2);
    assertEquals(results.get(0).getNumUnrollings(), 1);
  }
  
  @Test
  public void testRunSumtree08() {
    List<RadaResult> results = rada.run(testDir + "sumtree08.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);
    assertEquals(results.get(0).getSolverResults().size(), 1);
    assertEquals(results.get(0).getNumUnrollings(), 0);
  }
  
  @Test
  public void testRunSumtree09() {
    List<RadaResult> results = rada.run(testDir + "sumtree09.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);
    assertEquals(results.get(0).getSolverResults().size(), 1);
    assertEquals(results.get(0).getNumUnrollings(), 0);
  }
  
  @Test
  public void testRunSumtree10() {
    List<RadaResult> results = rada.run(testDir + "sumtree10.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.SAT);
    assertEquals(results.get(0).getSolverResults().size(), 2);
    assertEquals(results.get(0).getNumUnrollings(), 1);
  }
  
  @Test
  public void testRunSumtree11() {
    List<RadaResult> results = rada.run(testDir + "sumtree11.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.SAT);
    assertEquals(results.get(0).getSolverResults().size(), 4);
    assertEquals(results.get(0).getNumUnrollings(), 2);
  }
  
  @Test
  public void testRunSumtree12() {
    List<RadaResult> results = rada.run(testDir + "sumtree12.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);
    assertEquals(results.get(0).getSolverResults().size(), 1);
    assertEquals(results.get(0).getNumUnrollings(), 0);
  }
  
  @Test
  public void testRunSumtree13() {
    List<RadaResult> results = rada.run(testDir + "sumtree13.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.SAT);
    assertEquals(results.get(0).getSolverResults().size(), 2);
    assertEquals(results.get(0).getNumUnrollings(), 1);
  }
  
  @Test
  public void testRunSumtree14() {
    List<RadaResult> results = rada.run(testDir + "sumtree14.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);
    assertEquals(results.get(0).getSolverResults().size(), 5);
    assertEquals(results.get(0).getNumUnrollings(), 2);
  }
  
  @Test
  public void testRunMutrec1() {
    List<RadaResult> results = rada.run(testDir + "mut_rec1.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.SAT);
    assertEquals(results.get(0).getSolverResults().size(), 4);
    assertEquals(results.get(0).getNumUnrollings(), 2);
  }
  
  @Test
  public void testRunMutrec3() {
    List<RadaResult> results = rada.run(testDir + "mut_rec3.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);
    assertEquals(results.get(0).getSolverResults().size(), 3);
    assertEquals(results.get(0).getNumUnrollings(), 1);
  }
  
  @Test
  public void testRunMutrec4() {
    List<RadaResult> results = rada.run(testDir + "mut_rec4.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);
    assertEquals(results.get(0).getSolverResults().size(), 5);
    assertEquals(results.get(0).getNumUnrollings(), 2);
  }
  
  @Test
  public void testRunEmailGuardCorrect01() {
    List<RadaResult> results = 
        rada.run(testDir + "Email_Guard_Correct_01.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);
    assertEquals(results.get(0).getSolverResults().size(), 3);
    assertEquals(results.get(0).getNumUnrollings(), 1);
  }
  
  @Test
  public void testRunEmailGuardCorrect02() {
    List<RadaResult> results = 
        rada.run(testDir + "Email_Guard_Correct_02.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(0).getSolverResults().size(), 3);
    assertEquals(results.get(0).getNumUnrollings(), 1);
  }
  
  @Test
  public void testRunEmailGuardCorrect03() {
    List<RadaResult> results = 
        rada.run(testDir + "Email_Guard_Correct_03.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(0).getSolverResults().size(), 3);
    assertEquals(results.get(0).getNumUnrollings(), 1);
  }
  
  @Test
  public void testRunEmailGuardCorrect04() {
    List<RadaResult> results = 
        rada.run(testDir + "Email_Guard_Correct_04.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(0).getSolverResults().size(), 5);
    assertEquals(results.get(0).getNumUnrollings(), 2);
  }
  
  @Test
  public void testRunEmailGuardCorrect05() {
    List<RadaResult> results = 
        rada.run(testDir + "Email_Guard_Correct_05.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(0).getSolverResults().size(), 3);
    assertEquals(results.get(0).getNumUnrollings(), 1);
  }
  
  @Test
  public void testRunEmailGuardCorrect06() {
    List<RadaResult> results = 
        rada.run(testDir + "Email_Guard_Correct_06.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(0).getSolverResults().size(), 3);
    assertEquals(results.get(0).getNumUnrollings(), 1);
  }
  
  @Test
  public void testRunEmailGuardCorrect07() {
    List<RadaResult> results = 
        rada.run(testDir + "Email_Guard_Correct_07.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(0).getSolverResults().size(), 5);
    assertEquals(results.get(0).getNumUnrollings(), 2);
  }
  
  @Test
  public void testRunEmailGuardCorrect08() {
    List<RadaResult> results = 
        rada.run(testDir + "Email_Guard_Correct_08.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(0).getSolverResults().size(), 3);
    assertEquals(results.get(0).getNumUnrollings(), 1);
  }
  
  @Test
  public void testRunEmailGuardCorrect09() {
    List<RadaResult> results = 
        rada.run(testDir + "Email_Guard_Correct_09.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(0).getSolverResults().size(), 5);
    assertEquals(results.get(0).getNumUnrollings(), 2);
  }
  
  @Test
  public void testRunEmailGuardCorrect10() {
    List<RadaResult> results = 
        rada.run(testDir + "Email_Guard_Correct_10.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(0).getSolverResults().size(), 3);
    assertEquals(results.get(0).getNumUnrollings(), 1);
  }
  
  @Test
  public void testRunEmailGuardCorrect11() {
    List<RadaResult> results = 
        rada.run(testDir + "Email_Guard_Correct_11.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(0).getSolverResults().size(), 5);
    assertEquals(results.get(0).getNumUnrollings(), 2);
  }
  
  @Test
  public void testRunEmailGuardCorrect12() {
    List<RadaResult> results = 
        rada.run(testDir + "Email_Guard_Correct_12.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(0).getSolverResults().size(), 5);
    assertEquals(results.get(0).getNumUnrollings(), 2);
  }
  
  @Test
  public void testRunEmailGuardCorrect13() {
    List<RadaResult> results = 
        rada.run(testDir + "Email_Guard_Correct_13.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(0).getSolverResults().size(), 3);
    assertEquals(results.get(0).getNumUnrollings(), 1);
  }
  
  @Test
  public void testRunEmailGuardCorrect14() {
    List<RadaResult> results = 
        rada.run(testDir + "Email_Guard_Correct_14.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);
    assertEquals(results.get(0).getSolverResults().size(), 3);
    assertEquals(results.get(0).getNumUnrollings(), 1);
  }
  
  @Test
  public void testRunEmailGuardCorrect15() {
    List<RadaResult> results = 
        rada.run(testDir + "Email_Guard_Correct_15.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(0).getSolverResults().size(), 5);
    assertEquals(results.get(0).getNumUnrollings(), 2);
  }
  
  @Test
  public void testRunEmailGuardCorrect16() {
    List<RadaResult> results = 
        rada.run(testDir + "Email_Guard_Correct_16.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(0).getSolverResults().size(), 3);
    assertEquals(results.get(0).getNumUnrollings(), 1);
  }
  
  @Test
  public void testRunEmailGuardCorrect17() {
    List<RadaResult> results = 
        rada.run(testDir + "Email_Guard_Correct_17.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);
    assertEquals(results.get(0).getSolverResults().size(), 5);
    assertEquals(results.get(0).getNumUnrollings(), 2);
  }
  
  @Test
  public void testRunEmailGuardCorrectAll() {
    List<RadaResult> results = 
        rada.run(testDir + "Email_Guard_Correct_All.rada", solver);
    assertEquals(results.size(), 17);
    
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);
    assertEquals(results.get(0).getSolverResults().size(), 3);
    assertEquals(results.get(0).getNumUnrollings(), 1);
    
    assertEquals(results.get(1).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(1).getSolverResults().size(), 3);
    assertEquals(results.get(1).getNumUnrollings(), 1);
    
    assertEquals(results.get(2).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(2).getSolverResults().size(), 3);
    assertEquals(results.get(2).getNumUnrollings(), 1);
    
    assertEquals(results.get(3).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(3).getSolverResults().size(), 5);
    assertEquals(results.get(3).getNumUnrollings(), 2);
    
    assertEquals(results.get(4).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(4).getSolverResults().size(), 3);
    assertEquals(results.get(4).getNumUnrollings(), 1);
    
    assertEquals(results.get(5).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(5).getSolverResults().size(), 3);
    assertEquals(results.get(5).getNumUnrollings(), 1);
    
    assertEquals(results.get(6).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(6).getSolverResults().size(), 5);
    assertEquals(results.get(6).getNumUnrollings(), 2);    

    assertEquals(results.get(7).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(7).getSolverResults().size(), 3);
    assertEquals(results.get(7).getNumUnrollings(), 1);
    
    assertEquals(results.get(8).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(8).getSolverResults().size(), 5);
    assertEquals(results.get(8).getNumUnrollings(), 2);
    
    assertEquals(results.get(9).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(9).getSolverResults().size(), 3);
    assertEquals(results.get(9).getNumUnrollings(), 1);
    
    assertEquals(results.get(10).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(10).getSolverResults().size(), 5);
    assertEquals(results.get(10).getNumUnrollings(), 2);
    
    assertEquals(results.get(11).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(11).getSolverResults().size(), 5);
    assertEquals(results.get(11).getNumUnrollings(), 2);
    
    assertEquals(results.get(12).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(12).getSolverResults().size(), 3);
    assertEquals(results.get(12).getNumUnrollings(), 1);    
    
    assertEquals(results.get(13).getResultType(), ResultType.UNSAT);
    assertEquals(results.get(13).getSolverResults().size(), 3);
    assertEquals(results.get(13).getNumUnrollings(), 1);
    
    assertEquals(results.get(14).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(14).getSolverResults().size(), 5);
    assertEquals(results.get(14).getNumUnrollings(), 2);
    
    assertEquals(results.get(15).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(15).getSolverResults().size(), 3);
    assertEquals(results.get(15).getNumUnrollings(), 1);    
    
    assertEquals(results.get(16).getResultType(), ResultType.UNSAT);
    assertEquals(results.get(16).getSolverResults().size(), 5);
    assertEquals(results.get(16).getNumUnrollings(), 2);
  }
  
  @Test
  public void testRunNegativePositive01() {
    if (solver.equals(Z3)) {
      // Currently this test is only used for Z3 since CVC4 cannot handle it.
	  List<RadaResult> results = 
	      rada.run(testDir + "negative_positive01.rada", solver);
	  assertEquals(results.size(), 1);
	  assertEquals(results.get(0).getResultType(), ResultType.UNSAT);
	  assertEquals(results.get(0).getSolverResults().size(), 3);
	  assertEquals(results.get(0).getNumUnrollings(), 1);
	}
  }
  
  @Test
  public void testRunNegativePositive02() {
    if (solver.equals(Z3)) {      
      // Currently this test is only used for Z3 since CVC4 cannot handle it.
      List<RadaResult> results = 
          rada.run(testDir + "negative_positive02.rada", solver);
      assertEquals(results.size(), 1);
      assertEquals(results.get(0).getResultType(), ResultType.UNSAT);
      assertEquals(results.get(0).getSolverResults().size(), 13);
      assertEquals(results.get(0).getNumUnrollings(), 6);
    }
  }
  
  @Test
  public void testRunMinMax01() {
    if (solver.equals(Z3)) {
      // Currently this test is only used for Z3 since CVC4 cannot handle it.
      List<RadaResult> results = rada.run(testDir + "min_max01.rada", solver);
      assertEquals(results.size(), 1);
      assertEquals(results.get(0).getResultType(), ResultType.UNSAT);
      assertEquals(results.get(0).getSolverResults().size(), 3);
      assertEquals(results.get(0).getNumUnrollings(), 1);
    }
  }
  
  @Test
  public void testRunMinMax02() {
    if (solver.equals(Z3)) {
      // Currently this test is only used for Z3 since CVC4 cannot handle it.
      List<RadaResult> results = rada.run(testDir + "min_max02.rada", solver);
      assertEquals(results.size(), 1);
      assertEquals(results.get(0).getResultType(), ResultType.UNSAT);
      assertEquals(results.get(0).getSolverResults().size(), 13);
      assertEquals(results.get(0).getNumUnrollings(), 6);
    }
  }
  
  @Test
  public void testRunArrayLeaf01() {
    List<RadaResult> results = rada.run(testDir + "array_leaf01.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);
    assertEquals(results.get(0).getSolverResults().size(), 5);
    assertEquals(results.get(0).getNumUnrollings(), 2);
  }
  
  @Test
  public void testRunArrayLeaf02() {    
    List<RadaResult> results = rada.run(testDir + "array_leaf02.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.SAT);
    assertEquals(results.get(0).getSolverResults().size(), 4);
    assertEquals(results.get(0).getNumUnrollings(), 2);
  }
  
  @Test
  public void testRunMinSizeSum01() {
    List<RadaResult> results = rada.run(testDir + "min_size_sum01.rada", solver); 
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);
    assertEquals(results.get(0).getSolverResults().size(), 9);
    assertEquals(results.get(0).getNumUnrollings(), 4);
  }
  
  @Test
  public void testRunMinSizeSum02() {
    List<RadaResult> results = rada.run(testDir + "min_size_sum02.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.SAT);
    assertEquals(results.get(0).getSolverResults().size(), 6);
    assertEquals(results.get(0).getNumUnrollings(), 3);
  }

  @Test
  public void testRunMinMaxSum01() {    
    List<RadaResult> results = rada.run(testDir + "min_max_sum01.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);
    assertEquals(results.get(0).getSolverResults().size(), 9);
    assertEquals(results.get(0).getNumUnrollings(), 4);    
  }
  
  @Test
  public void testRunMinMaxSum02() {
    List<RadaResult> results = rada.run(testDir + "min_max_sum02.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.SAT);
    assertEquals(results.get(0).getSolverResults().size(), 6);
    assertEquals(results.get(0).getNumUnrollings(), 3);
  }  
  
  @Test
  public void testRunMinMaxSum03() {
    List<RadaResult> results = rada.run(testDir + "min_max_sum03.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.SAT);
    assertEquals(results.get(0).getSolverResults().size(), 8);
    assertEquals(results.get(0).getNumUnrollings(), 4);
  }
  
  @Test
  public void testRunMinMaxSum04() {
    List<RadaResult> results = rada.run(testDir + "min_max_sum04.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.SAT);
    assertEquals(results.get(0).getSolverResults().size(), 8);
    assertEquals(results.get(0).getNumUnrollings(), 4);
  }
  
  @Test
  public void testRunMinMaxSum05() {
    if (solver.equals(Z3)) {
      // Only use Z3 for this test because CVC4 can spend too much time solving it.
      List<RadaResult> results = 
          rada.run(testDir + "min_max_sum05.rada", solver);
      assertEquals(results.size(), 1);
      assertEquals(results.get(0).getResultType(), ResultType.UNSAT);
      assertEquals(results.get(0).getSolverResults().size(), 11);
      assertEquals(results.get(0).getNumUnrollings(), 5);
    }
  }
  
  @Test
  public void testRunForall01() {
    List<RadaResult> results = rada.run(testDir + "forall01.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.SAT);
    assertEquals(results.get(0).getSolverResults().size(), 14);
    assertEquals(results.get(0).getNumUnrollings(), 7);
  }  
  
  @Test
  public void testRunForall02() {
    List<RadaResult> results = rada.run(testDir + "forall02.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);
    assertEquals(results.get(0).getSolverResults().size(), 13);
    assertEquals(results.get(0).getNumUnrollings(), 6);
  }
  
  @Test
  public void testRunExists01() {
    List<RadaResult> results = rada.run(testDir + "exists01.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.SAT);
    assertEquals(results.get(0).getSolverResults().size(), 2);
    assertEquals(results.get(0).getNumUnrollings(), 1);
  }
  
  @Test
  public void testRunExists02() {
    List<RadaResult> results = rada.run(testDir + "exists02.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);
    assertEquals(results.get(0).getSolverResults().size(), 3);
    assertEquals(results.get(0).getNumUnrollings(), 1);
  }  
  
  @Test
  public void testRunMember01() {
    List<RadaResult> results = rada.run(testDir + "member01.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.SAT);
    assertEquals(results.get(0).getSolverResults().size(), 10);
    assertEquals(results.get(0).getNumUnrollings(), 5);
  }
  
  @Test
  public void testRunMember02() {
    List<RadaResult> results = rada.run(testDir + "member02.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);
    assertEquals(results.get(0).getSolverResults().size(), 13);
    assertEquals(results.get(0).getNumUnrollings(), 6);
  }    
  
  @Test
  public void testRunNGN01() {
    List<RadaResult> results = rada.run(testDir + "ngn01.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.SAT);
    assertEquals(results.get(0).getSolverResults().size(), 14);
    assertEquals(results.get(0).getNumUnrollings(), 7);
  }
  
  @Test
  public void testRunNGN02() {
    List<RadaResult> results = rada.run(testDir + "ngn02.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);
    assertEquals(results.get(0).getSolverResults().size(), 9);
    assertEquals(results.get(0).getNumUnrollings(), 4);
  }    

  @Test
  public void testRunNGNNGN01() {
    List<RadaResult> results = rada.run(testDir + "ngn_ngn01.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.SAT);
    assertEquals(results.get(0).getSolverResults().size(), 14);
    assertEquals(results.get(0).getNumUnrollings(), 7);
  }    
  
  @Test
  public void testRunNGNNGN02() {
    List<RadaResult> results = rada.run(testDir + "ngn_ngn02.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);
    assertEquals(results.get(0).getSolverResults().size(), 9);
    assertEquals(results.get(0).getNumUnrollings(), 4);
  } 
  
  @Test public void testRBTreeRedProperty() {
    List<RadaResult> results = 
        rada.run(testDir + "RBTree.Red_Property.rada", solver);
    assertEquals(results.size(), 12);
    
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);
    assertEquals(results.get(0).getSolverResults().size(), 5);
    assertEquals(results.get(0).getNumUnrollings(), 2);
    
    assertEquals(results.get(1).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(1).getSolverResults().size(), 5);
    assertEquals(results.get(1).getNumUnrollings(), 2);
    
    assertEquals(results.get(2).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(2).getSolverResults().size(), 3);
    assertEquals(results.get(2).getNumUnrollings(), 1);
    
    assertEquals(results.get(3).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(3).getSolverResults().size(), 3);
    assertEquals(results.get(3).getNumUnrollings(), 1);
    
    assertEquals(results.get(4).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(4).getSolverResults().size(), 9);
    assertEquals(results.get(4).getNumUnrollings(), 4);
    
    assertEquals(results.get(5).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(5).getSolverResults().size(), 9);
    assertEquals(results.get(5).getNumUnrollings(), 4);
    
    assertEquals(results.get(6).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(6).getSolverResults().size(), 3);
    assertEquals(results.get(6).getNumUnrollings(), 1);    

    assertEquals(results.get(7).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(7).getSolverResults().size(), 3);
    assertEquals(results.get(7).getNumUnrollings(), 1);
    
    assertEquals(results.get(8).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(8).getSolverResults().size(), 9);
    assertEquals(results.get(8).getNumUnrollings(), 4);
    
    assertEquals(results.get(9).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(9).getSolverResults().size(), 9);
    assertEquals(results.get(9).getNumUnrollings(), 4);
    
    assertEquals(results.get(10).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(10).getSolverResults().size(), 3);
    assertEquals(results.get(10).getNumUnrollings(), 1);
    
    assertEquals(results.get(11).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(11).getSolverResults().size(), 3);
    assertEquals(results.get(11).getNumUnrollings(), 1);
  }
  
  @Test
  public void testRBTreeRBlackProperty() {
    List<RadaResult> results = 
        rada.run(testDir + "RBTree.Black_Property.rada", solver);
    assertEquals(results.size(), 12);
    
    assertEquals(results.get(0).getResultType(), ResultType.UNSAT);
    assertEquals(results.get(0).getSolverResults().size(), 5);
    assertEquals(results.get(0).getNumUnrollings(), 2);
    
    assertEquals(results.get(1).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(1).getSolverResults().size(), 5);
    assertEquals(results.get(1).getNumUnrollings(), 2);
    
    assertEquals(results.get(2).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(2).getSolverResults().size(), 5);
    assertEquals(results.get(2).getNumUnrollings(), 2);
    
    assertEquals(results.get(3).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(3).getSolverResults().size(), 3);
    assertEquals(results.get(3).getNumUnrollings(), 1);
    
    assertEquals(results.get(4).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(4).getSolverResults().size(), 9);
    assertEquals(results.get(4).getNumUnrollings(), 4);
    
    assertEquals(results.get(5).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(5).getSolverResults().size(), 9);
    assertEquals(results.get(5).getNumUnrollings(), 4);
    
    assertEquals(results.get(6).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(6).getSolverResults().size(), 9);
    assertEquals(results.get(6).getNumUnrollings(), 4);    

    assertEquals(results.get(7).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(7).getSolverResults().size(), 3);
    assertEquals(results.get(7).getNumUnrollings(), 1);
    
    assertEquals(results.get(8).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(8).getSolverResults().size(), 9);
    assertEquals(results.get(8).getNumUnrollings(), 4);
    
    assertEquals(results.get(9).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(9).getSolverResults().size(), 7);
    assertEquals(results.get(9).getNumUnrollings(), 3);
    
    assertEquals(results.get(10).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(10).getSolverResults().size(), 7);
    assertEquals(results.get(10).getNumUnrollings(), 3);
    
    assertEquals(results.get(11).getResultType(), ResultType.UNSAT);    
    assertEquals(results.get(11).getSolverResults().size(), 3);
    assertEquals(results.get(11).getNumUnrollings(), 1);
  }
  
  @Test
  public void testArrayChecksumSumListAdd() {
    List<RadaResult> results = 
        rada.run(testDir + "array_checksum.SumListAdd.rada", solver);
    assertEquals(results.size(), 2);
    for (RadaResult result : results) {    
      assertEquals(result.getResultType(), ResultType.UNSAT);
      assertEquals(result.getSolverResults().size(), 3);
      assertEquals(result.getNumUnrollings(), 1);
    }
  }

  @Test
  public void testArrayChecksumSumListAddAlt() {
    List<RadaResult> results = 
        rada.run(testDir + "array_checksum.SumListAdd_Alt.rada", solver);
    assertEquals(results.size(), 13);
    for (RadaResult result : results) {    
      assertEquals(result.getResultType(), ResultType.UNSAT);
      assertEquals(result.getSolverResults().size(), 3);
      assertEquals(result.getNumUnrollings(), 1);
    }
  }  
  
  /*
   * Above are unit tests for well-designed examples that would be published in our paper.
   * Below are unit tests for bad examples that are only used for testing purposes.
   */
  
  /*
   * Test when we use :post-cond.
   */
  @Test
  public void testRunSumtree01WithPostCond() {
    List<RadaResult> results = 
        rada.run(testDir + "sumtree01_with_postcond.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.SAT);
    assertEquals(results.get(0).getSolverResults().size(), 4);
    assertEquals(results.get(0).getNumUnrollings(), 2);
  }
  
  /*
   * Test when we use :post-cond and multiple arguments
   */
  @Test
  public void testRunSumtree01WithArguments() {
    List<RadaResult> results = 
        rada.run(testDir + "sumtree01_with_arguments.rada", solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.SAT);
    assertEquals(results.get(0).getSolverResults().size(), 4);
    assertEquals(results.get(0).getNumUnrollings(), 2);
  }
  
  /*
   * Test when the maximum number of Unrolls is used and the result is UNKNOWN.
   */
  @Test
  public void testRunIntUnknown() {
    int maxUnrolls = 1;
    List<RadaResult> results = 
        rada.run(testDir + "sumtree01.rada", solver, maxUnrolls);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.UNKNOWN);
  }  
  
  /*
   * Test when the solver does not exist.
   */
  @Test
  public void testRunNonexistingSolver() {
    String nonExistingSolver = "noname";
    List<RadaResult> results = 
        rada.run(testDir + "sumtree01.rada", nonExistingSolver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.ERROR);
  }   

  /*
   * Test when the input file does not exist.
   */
  @Test
  public void testRunNonexistingFilePath() {
    String nonExistingFilePath = "non/existing/path";
    List<RadaResult> results = rada.run(nonExistingFilePath, solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.ERROR);
  }
    
  /*
   * Test when the input file does not have "check-sat".
   */
  @Test
  public void testRunNoCheckSat() {
    String noCheckSatFilePath = testDir + "error_nochecksat.rada";
    List<RadaResult> results = rada.run(noCheckSatFilePath, solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.ERROR);
  }
  
  /*
   * Test when the input file is unparsable.
   */
  @Test
  public void testRunUnparsable() {
    String unparsableFilePath = testDir + "error_unparsable.rada";
    List<RadaResult> results = rada.run(unparsableFilePath, solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.ERROR);
  }
  
  /*
   * Test when the the number of formal arguments and that of actual ones are mismatched.
   */
  @Test
  public void testRunArgumentMismatch() {
    String filePath = testDir + "error_argument_mismatch.rada";
    List<RadaResult> results = rada.run(filePath, solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.ERROR);
  }  
  
  /*
   * Test when the the number of formal arguments and that of actual ones are mismatched.
   */
  @Test
  public void testRunDuplicateArguments() {
    String filePath = testDir + "error_duplicate_arguments.rada";
    List<RadaResult> results = rada.run(filePath, solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.ERROR);
  }
  
  /*
   * Test when (push number) and (pop number) are used.
   * In this case, RADA will return an error.
   */
  @Test
  public void testPushNum() {
    String filePath = testDir + "error_pushnum.rada";
    List<RadaResult> results = rada.run(filePath, solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.ERROR);
  }  
  
  @Test
  public void testPopNum() {
    String filePath = testDir + "error_popnum.rada";
    List<RadaResult> results = rada.run(filePath, solver);
    assertEquals(results.size(), 1);
    assertEquals(results.get(0).getResultType(), ResultType.ERROR);
  }  
}