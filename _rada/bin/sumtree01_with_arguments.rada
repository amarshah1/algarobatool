;(set-option :produce-models true)
(set-logic QF_ALL_SUPPORTED)
(declare-datatypes () (
  ( RealTree 
    ( Node 
      (left RealTree) 
		  (elem Real) 
		  (right RealTree)) 
    (Leaf)
   )
))


; (declare-catamorphism SumTree (RealTree) Real)
(define-catamorphism SumTree ((foo RealTree) (x Int) (y Int)) Real 
	(ite 
		(is-Leaf foo) 
		0.0
		(+ (SumTree (left foo) (+ x 1) (+ y 2)) (elem foo) (SumTree (right foo) (+ x 3) (+ y 4)))
		)
  :post-cond (= (SumTree foo x y) (SumTree foo x y))
)

(declare-fun v1 () Real)
(declare-fun l1 () RealTree)
(declare-fun l2 () RealTree)


(assert (= l1 (Node l2 5.0 l2)))
(assert (= (SumTree l1 0.0 0.0) 5.0))
(assert (< (SumTree l1 0.0 0.0) 6.0))
(check-sat)
;(print-model)
(exit)
